# Prelude Verify API Demo

```elixir
project_root = Path.join(Path.dirname(__DIR__), "")
Mix.install([
  {:preludex, path: project_root, force: true},
  {:kino, "~> 0.14.2"}
])

alias Preludex.Verify
```

## Setup

```elixir
alias Preludex.Verify

import Kino.Shorts
```

First, let's set up your Prelude API token:

```elixir
api_token = read_password("Enter your Prelude API token")

if api_token == "" do
  Kino.interrupt!(:error, "You must provide an API token")
end

Application.put_env(:preludex, :api_token, api_token)
```

## Send Verification Code

Enter a phone number to send a verification code:

```elixir
phone_number = read_text("Enter phone number (E.164 format)")

if phone_number == "" do
  Kino.interrupt!(:error, "You must enter the phone number you want to send the verification code to")
end

case Verify.create_or_retry(phone_number) do
  {:ok, verification} ->
    Kino.Markdown.new("""
    ✅ Verification code sent!")
    - Status: #{Map.get(verification, "status")}
    """)
  {:error, reason} ->
    Kino.Markdown.new("❌ Error: #{reason}")
end
```

## Verify Code

Enter the verification code you received:

```elixir
code = read_text("Enter verification code")
phone_number = read_text("Enter phone number (E.164 format))")

if code == "" do
  Kino.interrupt!(:error, "You must enter the OTP code and phone number you want to verify")
end

case Verify.check(code, phone_number) do
  {:ok, verification} ->
    Kino.Markdown.new("""
    ✅ Verification successful!
    - Status: #{Map.get(verification, "status")}
    """)
  {:error, reason} ->
    Kino.Markdown.new("❌ Error: #{reason}")
end
```
