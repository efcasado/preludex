# Prelude Verify API Demo

```elixir
project_root = Path.join(Path.dirname(__DIR__), "")
Mix.install([
  {:preludex, path: project_root, force: true},
  {:kino, "~> 0.14.2"}
])

alias Preludex.Verify
```

## Setup

```elixir
alias Preludex.Verify

import Kino.Shorts

Logger.configure(level: :none)
```

First, let's set up your Prelude API token:

```elixir
api_token = read_password("Enter your Prelude API token")

if api_token == "" do
  Kino.interrupt!(:error, "You must provide an API token")
end

Application.put_env(:preludex, :api_token, api_token)
```

## Send Verification Code

```elixir
frame1 = Kino.Frame.new()

create_or_retry_form = Kino.Control.form(
  [
    phone_number: Kino.Input.text("Phone number (E.164 format)"),
    code_size: Kino.Input.number("Integer between 4 and 8 (defaults to Dashboard setting)"),
    locale: Kino.Input.select("BCP-47 formatted locale string",
    [
      "": nil,
      "en-US": "English",
      "es-ES": "Spanish",
      "fr-FR": "French",
      "pt-BR": "Portuguese",
      "tr-TR": "Turkish"
    ]),
    sender_id: Kino.Input.text("Custom sender ID (needs to be enabled by Prelude team)")
  ],
  submit: "Send"
)

Kino.Frame.render(frame1, create_or_retry_form)

Kino.listen(create_or_retry_form, fn event ->
  result = case Verify.create_or_retry(event.data.phone_number,
    code_size: event.data.code_size,
    locale: event.data.locale,
    sender_id: event.data.sender_id
  ) do
    {:ok, verification} ->
      Kino.Markdown.new("""
      ✅ Request succeeded! Status: `#{Map.get(verification, "status")}`
      """)
    {:error, reason} ->
      Kino.Markdown.new("""
      ❌ Request failed: `#{reason}`
      """)
  end
  Kino.Frame.render(frame1, create_or_retry_form)
  Kino.Frame.append(frame1, result)
end)

frame1
```

## Check Verification Code

```elixir
frame2 = Kino.Frame.new()

check_form = Kino.Control.form(
  [
    code: Kino.Input.text("Verification code"),
    phone_number: Kino.Input.text("Phone number (E.164 format)")
  ],
  submit: "Send"
)

Kino.Frame.render(frame2, check_form)

Kino.listen(check_form, fn event ->
  result = case Verify.check(event.data.code, event.data.phone_number) do
    {:ok, verification} ->
      Kino.Markdown.new("""
      ✅ Request succeeded! Status: `#{Map.get(verification, "status")}`
      """)
    {:error, reason} ->
      Kino.Markdown.new("""
      ❌ Request failed: `#{reason}`
      """)
  end
  Kino.Frame.render(frame2, check_form)
  Kino.Frame.append(frame2, result)
end)

frame2
```
